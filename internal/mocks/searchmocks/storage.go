// Code generated by mockery v2.12.2. DO NOT EDIT.

package searchmocks

import (
	context "context"
	testing "testing"

	searchresult "github.com/LuaSavage/yt_search_microservice/internal/domain/searchresult"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// CreateSearchResult provides a mock function with given fields: ctx, searchResult
func (_m *Storage) CreateSearchResult(ctx context.Context, searchResult *searchresult.SearchResult) error {
	ret := _m.Called(ctx, searchResult)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *searchresult.SearchResult) error); ok {
		r0 = rf(ctx, searchResult)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSearchResultByQuary provides a mock function with given fields: ctx, query
func (_m *Storage) GetSearchResultByQuary(ctx context.Context, query string) (*searchresult.StoreSearchResultDTO, error) {
	ret := _m.Called(ctx, query)

	var r0 *searchresult.StoreSearchResultDTO
	if rf, ok := ret.Get(0).(func(context.Context, string) *searchresult.StoreSearchResultDTO); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*searchresult.StoreSearchResultDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorage creates a new instance of Storage. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t testing.TB) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
