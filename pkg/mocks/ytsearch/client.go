// Code generated by mockery v2.12.2. DO NOT EDIT.

package ytsearchmocks

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"

	ytsearchapi "github.com/LuaSavage/yt_search_microservice/pkg/client/ytsearch"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Search provides a mock function with given fields: query
func (_m *Client) Search(query string) ([]*ytsearchapi.ResultDTO, error) {
	ret := _m.Called(query)

	var r0 []*ytsearchapi.ResultDTO
	if rf, ok := ret.Get(0).(func(string) []*ytsearchapi.ResultDTO); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ytsearchapi.ResultDTO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t testing.TB) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
