// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	testing "testing"

	youtube "github.com/kkdai/youtube/v2"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// GetStream provides a mock function with given fields: video, format
func (_m *Client) GetStream(video *youtube.Video, format *youtube.Format) (io.ReadCloser, int64, error) {
	ret := _m.Called(video, format)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(*youtube.Video, *youtube.Format) io.ReadCloser); ok {
		r0 = rf(video, format)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(*youtube.Video, *youtube.Format) int64); ok {
		r1 = rf(video, format)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*youtube.Video, *youtube.Format) error); ok {
		r2 = rf(video, format)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStreamContext provides a mock function with given fields: ctx, video, format
func (_m *Client) GetStreamContext(ctx context.Context, video *youtube.Video, format *youtube.Format) (io.ReadCloser, int64, error) {
	ret := _m.Called(ctx, video, format)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, *youtube.Video, *youtube.Format) io.ReadCloser); ok {
		r0 = rf(ctx, video, format)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, *youtube.Video, *youtube.Format) int64); ok {
		r1 = rf(ctx, video, format)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *youtube.Video, *youtube.Format) error); ok {
		r2 = rf(ctx, video, format)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetStreamURL provides a mock function with given fields: video, format
func (_m *Client) GetStreamURL(video *youtube.Video, format *youtube.Format) (string, error) {
	ret := _m.Called(video, format)

	var r0 string
	if rf, ok := ret.Get(0).(func(*youtube.Video, *youtube.Format) string); ok {
		r0 = rf(video, format)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*youtube.Video, *youtube.Format) error); ok {
		r1 = rf(video, format)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamURLContext provides a mock function with given fields: ctx, video, format
func (_m *Client) GetStreamURLContext(ctx context.Context, video *youtube.Video, format *youtube.Format) (string, error) {
	ret := _m.Called(ctx, video, format)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *youtube.Video, *youtube.Format) string); ok {
		r0 = rf(ctx, video, format)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *youtube.Video, *youtube.Format) error); ok {
		r1 = rf(ctx, video, format)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVideo provides a mock function with given fields: url
func (_m *Client) GetVideo(url string) (*youtube.Video, error) {
	ret := _m.Called(url)

	var r0 *youtube.Video
	if rf, ok := ret.Get(0).(func(string) *youtube.Video); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*youtube.Video)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVideoContext provides a mock function with given fields: ctx, url
func (_m *Client) GetVideoContext(ctx context.Context, url string) (*youtube.Video, error) {
	ret := _m.Called(ctx, url)

	var r0 *youtube.Video
	if rf, ok := ret.Get(0).(func(context.Context, string) *youtube.Video); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*youtube.Video)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t testing.TB) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
